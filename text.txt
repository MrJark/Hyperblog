Comandos para Git y GitHug

- git show text.txt = esto me muestra todos los cambios que se han hecho 

- git diff (números largos de un commit) (números largos de un commit) = esto nos sirve para comparar los cambios que se hicieron con el commit del numero primero con el del segundo

- git rm = es el código para remuve, para remover el archivo de la nuve donde está esperando ser almacinado con el commit y lo devuelves al estado de no en la nube. nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versione

- git rm --cached Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro

- git rm --force  Elimina los archivos de Git y del disco duro

- git add = el archivo lo añades a un staging, una nueve donde espera para ser enviado al repositorio con el git commit -m " ". Antes de que pase esto, esta untracked

- git commit -m "mensaje" = es para llegar al repositorio y guardarlo allí 

- git reset (número de la versión)= nos permite volver a una versión anterior de nuestro archivo. Existe el soft y el hard.
    .El git reset (nº) --soft = no vuelve a la versión anterior pero sabiendo que lo que tenemos en staging se nos mantiene
    . el git reset (nº) --hard = nos devuelve todo al número anterir, incluidos los staging

- esc+shift+z+z = con este comando fuerza a la salida del commit y nos permie colver a escribir

- git checkout (nº) me trae la versión del número que le he puesto

//Los comandos a continuación nos permiten trabajar en proyectos muy grandes//

- git log me muestra todos los numeros de los cambios que he hecho 

- git log --oneline Te muestra el id commit y el título del commit.

- git log --decorate  Te muestra donde se encuentra el head point en el log.

- git log --stat  Explica el número de líneas que se cambiaron brevemente.

- git log -p  Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.

- git shortlog  Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.

- git log --graph --oneline --decorate y
- git log --pretty=format "%cn hizo un commit %h el dia %cd"  Muestra mensajes personalizados de los commits.

- git log -3  Limitamos el número de commits.

- git log --after=“2018-1-2”

- git log --after=“today” y
- git log --after=“2018-1-2” --before=“today”  Commits para localizar por fechas.
- git log --author=“Name Author”  Commits hechos por autor que cumplan exactamente con el nombre.

- git log --grep=“INVIE”  Busca los commits que cumplan tal cual está escrito entre las comillas.

- git log --grep=“INVIE” –i  Busca los commits que cumplan sin importar mayúsculas o minúsculas.

- git log – index.html  Busca los commits en un archivo en específico.
- git log -S “Por contenido”  Buscar los commits con el contenido dentro del archivo.

- git log > log.txt  guardar los logs en un archivo txt

//

- git clone (url) Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios de .git

- git push va después de hacer git add y git commit -m " " y lo usamos para mandar los cambios a un servidor remoto

- git fetch lo utilizamos para traer actualizaciones del servidor remoto y guardarlas en el repositorio local

- git merge lo usamos para combinar nuestro repositorio local con el remoto

- git pull es el combinar los dos anteriores en uno

- git commit -am "mensaje" es para los archivos que no parten desde cero, es decir, ya hemos hecho algún commit y no son nuevos y este comando lo que me hace es un add a la vez que inserto el commit con el mensaje

- git brach nos muestra las distintas ramas que tenemos para trabajar o que hemos creado para saber cuales son y si queremos hacer un merge

- git remote add origin (url del repositorio que queremos tener) esto nos sirve para mover un repositorio creado de github a nuestro sistema 

- git pull origin main con este comando puedo traer los cambios que haya hecho en el post o donde sea del proyecto que esté trabajando a mi vs code 

- git push origin main puedo mandar a github los cambios que haga en vs code, estos dos ultimos? una maranivilla

- git log --all --graph --decorate --oneline nos muestra todos los cambios que hemos hecho a lo largo del proyecto en una linea cada uno y mucho más compacto

+ los aliases nos sirve para evitar codigos muy largos y cambiarlos por otros más corto, por ejepmlo, quiero cambiar el git tan largo anterior por arbolito, lo que haría seria: alias arbolito = "git log --all --graph --decorate --oneline"

+ los tag nos sirven para crear las distintas versiones del proyecto y saber por cual vamos y dejar la referencia en el mundo online ya que en el ofline no es necesario, estos tag se crean: git tag -a v0.1 -m "Resultado de las primeras clases del curso" (nº del hash que quieres poner como la v0.1, es ese numero largo)

- git show-ref --tags me muestra a que hash pertenece cada tag y versión

- git push origin --tags esto nos sirva para llevar al origin, github, los tags que tenemos y poder mostrarlos allí pero antes de hacer esto debemos hacer un "git pull origin main" para traernos todo lo que tenemos en github 

- git tag -d (nombre tag a borrar) es para eliminar los tags que no quiero tener
- git push origin :refs/tags/(nombre del tag a eliminar) este comando se usa para eliminar el tag de github de forma inmediata

- gitk nos muestra de forma visual que es lo que ha pasado a la largo del proyecto

+ para enviar la rama que no tenemos en github pero si en local, primero tenemos que hacer un 'git pull origin main' para traer todo lo último que tenemos, después nos movemos con 'git checkout (nombre de la rama que queremos subir)' y después empujamos a git la rama que queremos con 'git push origin (nombre de la rama a empujar)'

+los archivos binarios no se deben guardar en el repositorio, se deben guardar a parte y para subir esto, debo cambiarme a la rama header ya que es solo para ellas y lo hago con 'git checkout header', hago un pull de la rama header, hago un 'git commit -m "añado logo"' y ya hago el push a la rama header con el logo

+ cuando hacermos un fork el problema es que no se actualizan de forma auto. las siguientes updates que haga el propietario de donde hemos hecho el fork. Por tanto, tenemos que hacer pull's de una forma 'constante' para mantenernos actualizados con los cambios que haga el propietario. Pero para hacerlo en la consola tenemos que: 
    1. copiar la url del proyecto que estamos haciendo fork 
    2. vamos a la terminal y ponemos: git remote add upstream (url) esto lo hacemos para crearnos una fuente nueva distinta a origin 
    3. git remote -v para ver que esa rama upstream se ha creado correctamente
    4. git pull upstream main y esto nos hace pasarnos todos los cambios de main a la rama upstream
    5. git commit -am "Fusión"

+ el readme.md está hecho en la página https://pandao.github.io/editor.md/en.html

+ "rebase" es el proceso de mover o combinar una secuencia de confirmaciones en una nueva confirmación base. Y esto hacerlo en un repositorio online es una MUY MALA práctica. Solo se debería hacer para repositorios locales para arreglar los bugs. Para ello tenemos  que crear un branch para esa nueva rama, y para fusionarla y que se pegue a la rama main y desaparezca este 'experimento' tenemos que meternos en la rama experimento  con 'git checkout (nombre rama experimento)', y dentro de este rama ponemos el comando 'git rebase (nombre de la rama original que tenemos en el repositorio, en este caso main)'

 - git branch -D (nombre del branch que quiero eliminar) este comando nos elimina el branch que no queramos tener

- git stash guarda el trabajo actual del Staging en una lista diseñada para ser temporal llamada Stash, para que pueda ser recuperado en el futuro
    +podemos guardar en el stash con un mensaje como : - 'git stash save " tu mensaje " '
    +para recuperar los últimos cambios tenemos que aplicar el 'git stash pop' 
    +para crear una rama con stash 'git stash branch (nombre rama)'
    +para eliminar los elementos o cambios mas recientes del stash 'git stash drop'
    +para eliminar todos los elementos del stash 'git stash clear'

- git clean --dry-run este comando me muestra que va a eliminar por si hemos hecho algunas copias que no queremos o algo que no deberiamos tener y es git quien sabe esto y que deberia borrar
- git f me elimina directamente sin decirme nada

- git cherry-pick (es una mala practica y deberiamos hacerlo con un merge o un checkout) me permite tomar uno o carios commits de otras ramas sin tener que hacer un merge completo con tan solo copiar el hash 

- git reflog nos muestra TODO lo que pasó, sea lo que sea, hiciera lo que hiciera y de ahí puedo coger el último hash que estaba bien y lo copio y hago luego un 'git reset --HARD (nº del hash al que queiro volver)' y ya estaría todo solucionado.
    +el 'git reset --HARD (nº hash al que vuelvo) es para resetear TDOD (es mala practica  no ser que lo haya roto todo)
    +el 'git reset --SOFT (nº hash al que vuelvo) es para resetear todo EXCEPTO lo que esté en staging 