Comandos para Git y GitHug

- git show text.txt = esto me muestra todos los cambios que se han hecho 

- git diff (números largos de un commit) (números largos de un commit) = esto nos sirve para comparar los cambios que se hicieron con el commit del numero primero con el del segundo

- git rm = es el código para remuve, para remover el archivo de la nuve donde está esperando ser almacinado con el commit y lo devuelves al estado de no en la nube. nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versione

- git rm --cached Elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro

- git rm --force  Elimina los archivos de Git y del disco duro

- git add = el archivo lo añades a un staging, una nueve donde espera para ser enviado al repositorio con el git commit -m " ". Antes de que pase esto, esta untracked

- git commit -m "mensaje" = es para llegar al repositorio y guardarlo allí 

- git reset (número de la versión)= nos permite volver a una versión anterior de nuestro archivo. Existe el soft y el hard.
    .El git reset (nº) --soft = no vuelve a la versión anterior pero sabiendo que lo que tenemos en staging se nos mantiene
    . el git reset (nº) --hard = nos devuelve todo al número anterir, incluidos los staging

- esc+shift+z+z = con este comando fuerza a la salida del commit y nos permie colver a escribir

- git checkout (nº) me trae la versión del número que le he puesto

//Los comandos a continuación nos permiten trabajar en proyectos muy grandes//

- git log me muestra todos los numeros de los cambios que he hecho 

- git log --oneline Te muestra el id commit y el título del commit.

- git log --decorate  Te muestra donde se encuentra el head point en el log.

- git log --stat  Explica el número de líneas que se cambiaron brevemente.

- git log -p  Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.

- git shortlog  Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.

- git log --graph --oneline --decorate y
- git log --pretty=format "%cn hizo un commit %h el dia %cd"  Muestra mensajes personalizados de los commits.

- git log -3  Limitamos el número de commits.

- git log --after=“2018-1-2”

- git log --after=“today” y
- git log --after=“2018-1-2” --before=“today”  Commits para localizar por fechas.
- git log --author=“Name Author”  Commits hechos por autor que cumplan exactamente con el nombre.

- git log --grep=“INVIE”  Busca los commits que cumplan tal cual está escrito entre las comillas.

- git log --grep=“INVIE” –i  Busca los commits que cumplan sin importar mayúsculas o minúsculas.

- git log – index.html  Busca los commits en un archivo en específico.
- git log -S “Por contenido”  Buscar los commits con el contenido dentro del archivo.

- git log > log.txt  guardar los logs en un archivo txt

//

- git clone (url) Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios de .git

- git push va después de hacer git add y git commit -m " " y lo usamos para mandar los cambios a un servidor remoto

- git fetch lo utilizamos para traer actualizaciones del servidor remoto y guardarlas en el repositorio local

- git merge lo usamos para combinar nuestro repositorio local con el remoto

- git pull es el combinar los dos anteriores en uno

- git commit -am "mensaje" es para los archivos que no parten desde cero, es decir, ya hemos hecho algún commit y no son nuevos y este comando lo que me hace es un add a la vez que inserto el commit con el mensaje

- git brach nos muestra las distintas ramas que tenemos para trabajar o que hemos creado para saber cuales son y si queremos hacer un merge

- git remote add origin (url del repositorio que queremos tener) esto nos sirve para mover un repositorio creado de github a nuestro sistema 

- git pull origin main con este comando puedo traer los cambios que haya hecho en el post o donde sea del proyecto que esté trabajando a mi vs code 

- git push origin main puedo mandar a github los cambios que haga en vs code, estos dos ultimos? una maranivilla

- git log --all --graph --decorate --oneline nos muestra todos los cambios que hemos hecho a lo largo del proyecto en una linea cada uno y mucho más compacto

